{# @var craft \craft\web\twig\variables\CraftVariable #}
{% set baseUrl = craft.app.config.general.custom.baseUrl %}
{% set staticAssetsVersion = craft.app.config.general.custom.staticAssetsVersion %}
<div class="my-8 w-full">
    <div class="w-full max-w-lg mx-auto">
        {# -- Episode number and date -- #}
        <div>
            <div class="inline-block text-devmode-pink bg-grey-lightest font-mono text-xs text-left uppercase p-8">
                {{ "Episode " ~ episode.episodeNumber }} / {{ episode.postDate |date('Y.m.d') }}
            </div>
        </div>
        {# -- Episode title -- #}
        <div>
            <div class="inline-block text-devmode-pink bg-grey-lightest font-mono italic text-bold text-4xl sm:text-5xl p-8">
                <a href="{{ episode.url }}" class="title-link" @mouseover="prerenderLink">
                    <strong>
                        {{ episode.title |typogrify }}
                    </strong>
                </a>
            </div>
        </div>
        {# -- Episode hosts -- #}
        <div>
            <div class="inline-block text-devmode-pink bg-grey-lightest font-mono text-xs text-left p-8">
                {% for host in episode.episodeHosts.all() %}{{ host.fullName }}{% if not loop.last %}, {% endif %}{% endfor %}
            </div>
        </div>
        {# -- Episode tags -- #}
        <div>
            <div class="inline-block bg-grey-lightest p-8">
                {% for tag in episode.episodeTags.all() %}
                    <span class="devmode-tags">
                        #{{ tag.title }}
                    </span>
                {% endfor %}
            </div>
        </div>
        {# -- Episode summary -- #}
        <div>
            <div class="inline-block text-devmode-pink bg-grey-lightest font-sans text-xl p-8 leading-normal">
                {{ episode.episodeSummary |nl2br |typogrify }}
            </div>
        </div>
        {# -- Reference links -- #}
        {% if  episode.episodeReferenceLinks |length %}
            <div>
                <div class="inline-block text-devmode-pink bg-grey-lightest font-sans text-2xl p-8">
                    <i class="icon-info-circled align-middle"></i>
                    <ul class="list-reset inline">
                        {% for link in episode.episodeReferenceLinks %}
                            <li class="inline">
                                <a href="{{ link.linkUrl }}" class="tags-link align-middle whitespace-no-wrap" title="{{ link.linkName }}" rel="nofollow,noopener">{{ link.linkName }}</a>
                                <span> </span>
                            </li>
                        {% endfor %}
                    </ul>
                </div>
            </div>
        {% endif %}
    </div>
</div>

<div class="p-8 my-8 w-full bg-grey-lightest rounded-full">
    <div class="w-full mx-auto">
{# -- Audio player -- #}
        {% set transAudioUrl = craft.transcoder.getAudioUrl(episode.episodeMedia.one(), {
            "audioBitRate": "64k",
            "audioSampleRate": 22050,
            "audioChannels": 1
        }) %}
        {% if transAudioUrl |length %}
            <div class="">
                <div id="single-song-player">
                    <div class="bottom-container flex items-center">

                        <div class="control-container flex-shrink">
                            <div class="amplitude-play-pause" amplitude-main-play-pause="true" id="play-pause">
                                <div class="text-devmode-pink text-4xl cursor-pointer">
                                    <i class="icon-play" v-show="paused"></i>
                                    <i class="icon-pause" v-show="!paused"></i>
                                </div>
                            </div>
                        </div>

                        <div class="hidden sm:block time-container flex-shrink pr-3 pl-1">
                            <span class="current-time text-devmode-pink font-mono text-xs text-left">
                                <span class="amplitude-current-hours" amplitude-main-current-hours="true"></span>:<span class="amplitude-current-minutes" amplitude-main-current-minutes="true"></span>:<span class="amplitude-current-seconds" amplitude-main-current-seconds="true"></span>
                            </span>
                        </div>

                        <div class="flex-grow px-1 pt-0">
                            <progress class="amplitude-song-played-progress w-full h-3 rounded"
                                      amplitude-main-song-played-progress="true"
                                      id="song-played-progress"
                                      @click="seek"
                                      :value="progress">
                            </progress>
                        </div>

                        <div class="time-container flex-shrink pl-3 pr-1">
                            <span class="duration text-devmode-pink font-mono text-xs text-left">
                                <span class="amplitude-duration-hours" amplitude-main-duration-hours="true"></span>:<span class="amplitude-duration-minutes" amplitude-main-duration-minutes="true"></span>:<span class="amplitude-duration-seconds" amplitude-main-duration-seconds="true"></span>
                            </span>
                        </div>

                    </div>
                </div>
            </div>

            <script>
                loadjs(
                    [
                        "{{ baseUrl }}js/amplitude.min.{{staticAssetsVersion}}.js"
                    ],
                    "amplitude"
                );
                loadjs.ready(["vue", "axios", "amplitude"], {
                    success: function() {
                        // Use Axios as our http client
                        Vue.prototype.$http = axios;
                        // Create our Vue component
                        var player = new Vue({
                            el: '#single-song-player',
                            components: {},
                            delimiters: ['${', '}'],
                            data: {
                                progress: 0,
                                paused: true,
                            },
                            computed: {
                            },
                            methods: {
                                isPaused: function() {
                                    var audio = Amplitude.audio();
                                    return audio.paused;
                                },
                                // Handle the player seek
                                seek: function(e) {
                                    var offset = e.target.getBoundingClientRect(),
                                    x = e.pageX - offset.left,
                                    percentage = (parseFloat(x) / parseFloat(e.target.offsetWidth)) * 100;
                                    Amplitude.setSongPlayedPercentage(percentage);
                                }
                            },
                            mounted: function() {
                                var self = this;
                                Amplitude.init({
                                    "preload": "metadata",
                                    "songs": [
                                        {
                                            "name": "{{ episode.title }}",
                                            "artist": "{{ showInfo.showTitle }}",
                                            "url": "{{ transAudioUrl }}"
                                        },
                                    ],
                                    "bindings": {
                                        37: 'prev',
                                        39: 'next',
                                        32: 'play_pause'
                                    },
                                    "callbacks": {
                                        'after_play': function() {
                                            var audio = Amplitude.audio();
                                            self.paused = audio.paused;
                                        },
                                        'after_pause': function() {
                                            var audio = Amplitude.audio();
                                            self.paused = audio.paused;
                                        }
                                    }
                                });
                            },
                        });
                    }
                });
            </script>

        {% endif %}
    </div>
</div>
