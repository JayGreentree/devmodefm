{"version":3,"sources":["webpack:///./node_modules/vue-clickaway/dist/vue-clickaway.common.js"],"names":["Vue","__webpack_require__","test","version","util","warn","HANDLER","bind","el","binding","vnode","unbind","vm","context","callback","value","initialMacrotaskEnded","setTimeout","ev","path","composedPath","undefined","indexOf","contains","target","call","document","documentElement","addEventListener","removeEventListener","directive","update","oldValue","mixin","directives","onClickaway","exports"],"mappings":";;;;;;;;;yFAEA,IAAAA,EAAUC,EAAQ,GAClBD,EAAA,YAAAA,IAAA,QAAAA,EAIA,OAAAE,KAAAF,EAAAG,UAEAH,EAAAI,KAAAC,KAAA,sEAAAL,EAAAG,SAOA,IAAAG,EAAA,yBAEA,SAAAC,EAAAC,EAAAC,EAAAC,GACAC,EAAAH,GAEA,IAAAI,EAAAF,EAAAG,QAEAC,EAAAL,EAAAM,MACA,sBAAAD,EAAA,CAkBA,IAAAE,GAAA,EACAC,WAAA,WACAD,GAAA,GACG,GAEHR,EAAAF,GAAA,SAAAY,GAMA,IAAAC,EAAAD,EAAAC,OAAAD,EAAAE,aAAAF,EAAAE,oBAAAC,GACA,GAAAL,IAAAG,IAAAG,QAAAd,GAAA,GAAAA,EAAAe,SAAAL,EAAAM,SACA,OAAAV,EAAAW,KAAAb,EAAAM,IAIAQ,SAAAC,gBAAAC,iBAAA,QAAApB,EAAAF,IAAA,IAGA,SAAAK,EAAAH,GACAkB,SAAAC,gBAAAE,oBAAA,QAAArB,EAAAF,IAAA,UACAE,EAAAF,GAGA,IAAAwB,EAAA,CACAvB,OACAwB,OAAA,SAAAvB,EAAAC,GACAA,EAAAM,QAAAN,EAAAuB,UACAzB,EAAAC,EAAAC,IAEAE,UAGAsB,EAAA,CACAC,WAAA,CAAeC,YAAAL,IAGfM,EAAAjC,QA3EA,QA4EAiC,EAAAN,YACAM,EAAAH","file":"js/vueclickaway-legacy.691afeaea26961fab0e9.js","sourcesContent":["'use strict';\r\n\r\nvar Vue = require('vue');\r\nVue = 'default' in Vue ? Vue['default'] : Vue;\r\n\r\nvar version = '2.2.2';\r\n\r\nvar compatible = (/^2\\./).test(Vue.version);\r\nif (!compatible) {\r\n  Vue.util.warn('VueClickaway ' + version + ' only supports Vue 2.x, and does not support Vue ' + Vue.version);\r\n}\r\n\r\n\r\n\r\n// @SECTION: implementation\r\n\r\nvar HANDLER = '_vue_clickaway_handler';\r\n\r\nfunction bind(el, binding, vnode) {\r\n  unbind(el);\r\n\r\n  var vm = vnode.context;\r\n\r\n  var callback = binding.value;\r\n  if (typeof callback !== 'function') {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      Vue.util.warn(\r\n        'v-' + binding.name + '=\"' +\r\n        binding.expression + '\" expects a function value, ' +\r\n        'got ' + callback\r\n      );\r\n    }\r\n    return;\r\n  }\r\n\r\n  // @NOTE: Vue binds directives in microtasks, while UI events are dispatched\r\n  //        in macrotasks. This causes the listener to be set up before\r\n  //        the \"origin\" click event (the event that lead to the binding of\r\n  //        the directive) arrives at the document root. To work around that,\r\n  //        we ignore events until the end of the \"initial\" macrotask.\r\n  // @REFERENCE: https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n  // @REFERENCE: https://github.com/simplesmiler/vue-clickaway/issues/8\r\n  var initialMacrotaskEnded = false;\r\n  setTimeout(function() {\r\n    initialMacrotaskEnded = true;\r\n  }, 0);\r\n\r\n  el[HANDLER] = function(ev) {\r\n    // @NOTE: this test used to be just `el.containts`, but working with path is better,\r\n    //        because it tests whether the element was there at the time of\r\n    //        the click, not whether it is there now, that the event has arrived\r\n    //        to the top.\r\n    // @NOTE: `.path` is non-standard, the standard way is `.composedPath()`\r\n    var path = ev.path || (ev.composedPath ? ev.composedPath() : undefined);\r\n    if (initialMacrotaskEnded && (path ? path.indexOf(el) < 0 : !el.contains(ev.target))) {\r\n      return callback.call(vm, ev);\r\n    }\r\n  };\r\n\r\n  document.documentElement.addEventListener('click', el[HANDLER], false);\r\n}\r\n\r\nfunction unbind(el) {\r\n  document.documentElement.removeEventListener('click', el[HANDLER], false);\r\n  delete el[HANDLER];\r\n}\r\n\r\nvar directive = {\r\n  bind: bind,\r\n  update: function(el, binding) {\r\n    if (binding.value === binding.oldValue) return;\r\n    bind(el, binding);\r\n  },\r\n  unbind: unbind,\r\n};\r\n\r\nvar mixin = {\r\n  directives: { onClickaway: directive },\r\n};\r\n\r\nexports.version = version;\r\nexports.directive = directive;\r\nexports.mixin = mixin;"],"sourceRoot":""}